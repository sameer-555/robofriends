{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","emails","className","alt","src","CardList","robots","map","user","i","key","email","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","console","log","children","Component","Scroll","style","overflow","border","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0OAceA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OACxB,OACC,yBAAKC,UAAU,uCACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BL,EAA3B,cACrB,6BACC,4BAAKC,GACL,4BAAKC,MCcMI,EAnBC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBW,MAAOL,EAAOG,GAAGE,aCCRC,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKZ,UAAY,OACjB,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCeEI,G,wDArBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,UAAS,GAHO,E,8DAODC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKxB,OADAK,QAAQC,IAAI,SAASH,KAAKH,UACvBG,KAAKJ,MAAMC,SACN,4DAEDG,KAAKL,MAAMS,a,GAjBQC,cCQZC,EARA,SAACX,GACf,OACC,yBAAKY,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEf,EAAMS,WC4CKO,E,kDAxCd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKZ,SAAS,CAACZ,YAAYwB,EAAMC,OAAOC,SAdxC,EAAKnB,MAAQ,CACZd,OAAQ,GACRO,YAAa,IAJD,E,gEAQM,IAAD,OAClBa,QAAQC,IAAI,OACZa,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKnB,SAAS,CAACnB,OAAOsC,S,+BAO7B,IAAD,EACwBpB,KAAKJ,MAA7Bd,EADA,EACAA,OAAQO,EADR,EACQA,YACVgC,EAAiBvC,EAAOwC,QAAO,SAAAC,GACpC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,kBAEtD,OAAQ1C,EAAO4C,OAGd,yBAAKhD,UAAU,MACf,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWY,aAAcU,KAAKY,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU9B,OAAQuC,OAPpB,2C,GA1BgBhB,aCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACLI,QAAQJ,MAAMA,EAAM4C,a","file":"static/js/main.acb21e78.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, emails}) => {\n\treturn(\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow'>\n\t\t\t<img alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<h2>{emails}</h2>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList =({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\trobots.map((user,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t\t)\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) => {\n\treturn(\n\t\t<div className = 'pa2'>\n\t\t<input\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>)\n};\n\nexport default SearchBox","import React , { Component } from 'react'\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError:false\n\t\t}\n\t}\n\ncomponentDidCatch(error,info){\n\tthis.setState({hasError:true})\n}\n\nrender(){\n\tconsole.log(\"batman\",this.hasError)\n\tif(this.state.hasError){\n\t\treturn <h1> Opps. Something went wrong </h1>\n\t}\n\treturn this.props.children\n}\n\n}\n\nexport default ErrorBoundry","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '1px solid black', height: '800px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll","import React, {Component} from 'react'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\n// import {robots} from '../components/robots'\nimport './App.css'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Scroll from '../components/Scroll'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tconsole.log(\"cdm\")\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({robots:users}))\n\t}\n\n\tonSearchChange = (event) =>{\n\t\tthis.setState({searchfield:event.target.value})\n\t}\n\n\trender(){\n\tconst { robots, searchfield } = this.state\n\tconst filteredRobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\n\t})\n\treturn !robots.length ?\n\t\t<h1>Loading</h1> :\n\t\t(\n\t\t<div className='tc'>\n\t\t<h1 className='f1'>RoboFriend</h1>\n\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t<Scroll>\n\t\t\t<ErrorBoundry>\n\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t</ErrorBoundry>\t\n\t\t</Scroll>\n\t\t</div>\n\t\t)\n}\n}\t\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport 'tachyons'\nimport App from './containers/App' \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App/>\n, document.getElementById('root'));\n//bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}